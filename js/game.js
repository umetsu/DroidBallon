// Generated by CoffeeScript 1.4.0
(function() {
  var Background, Coin, Diamond, Droid, EnemyDroid, Explosion, GameScene, HighScoreScene, Item, R, ScoreUpLabel, Settings, SpritePool, TitleScene, World,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  R = (function() {

    function R() {}

    R.TITLE_BACKGROUND_IMAGE = 'assets/images/title_background.png';

    R.TITLE_LOGO_IMAGE = 'assets/images/logo.png';

    R.START_BUTTON_IMAGE = 'assets/images/start_button.png';

    R.HIGHSCORE_BUTTON_IMAGE = 'assets/images/highscore_button.png';

    R.HELP_BUTTON_IMAGE = 'assets/images/start.png';

    R.START_IMAGE = 'assets/images/start.png';

    R.END_IMAGE = 'assets/images/end.png';

    R.PLAYER_IMAGE = "assets/images/player.png";

    R.ENEMY_IMAGE = "assets/images/enemy.png";

    R.ICON_IMAGE = "assets/images/icon0.png";

    R.BACKGROUND_IMAGE = "assets/images/background.png";

    R.UPBUTTON_IMAGE = "assets/images/upbutton.png";

    R.EXPLOSION_IMAGE = "assets/images/effect0.png";

    R.assets = [R.TITLE_BACKGROUND_IMAGE, R.TITLE_LOGO_IMAGE, R.START_BUTTON_IMAGE, R.HIGHSCORE_BUTTON_IMAGE, R.HELP_BUTTON_IMAGE, R.START_IMAGE, R.END_IMAGE, R.PLAYER_IMAGE, R.ENEMY_IMAGE, R.ICON_IMAGE, R.BACKGROUND_IMAGE, R.UPBUTTON_IMAGE, R.EXPLOSION_IMAGE];

    return R;

  })();

  SpritePool = (function() {

    function SpritePool(createSprite, maxPoolSize) {
      this.sprites = [];
      this.createSprite = createSprite;
      this.maxPoolSize = maxPoolSize;
    }

    SpritePool.prototype.newSprite = function() {
      var sprite;
      if (this.sprites.length === 0) {
        sprite = this.createSprite();
      } else {
        sprite = this.sprites.pop();
      }
      return sprite;
    };

    SpritePool.prototype.free = function(sprite) {
      if (this.sprites.length < this.maxPoolSize) {
        return this.sprites.push(sprite);
      }
    };

    return SpritePool;

  })();

  Settings = (function() {

    function Settings() {}

    Settings.highScores = [];

    Settings.save = function() {
      var highScores;
      highScores = {
        "highScores": Settings.highScores
      };
      return localStorage.setItem('highScores', JSON.stringify(highScores));
    };

    Settings.load = function() {
      var highScores, t;
      t = localStorage.getItem('highScores');
      highScores = t != null ? JSON.parse(t) : {
        "highScores": [1000, 900, 800, 700, 600, 500, 400, 300, 200, 100]
      };
      return Settings.highScores = highScores.highScores;
    };

    Settings.addScore = function(score) {
      Settings.highScores.push(score);
      Settings.highScores = _.sortBy(Settings.highScores, function(score) {
        return Math.max(score);
      });
      Settings.highScores.reverse();
      return Settings.highScores.splice(10, Settings.highScores.length - 9);
    };

    return Settings;

  })();

  enchant();

  window.onload = function() {
    var game;
    game = new Game(320, 480);
    game.fps = 30;
    game.preload(R.assets);
    game.onload = function() {
      return this.replaceScene(new TitleScene());
    };
    return game.start();
  };

  HighScoreScene = (function(_super) {

    __extends(HighScoreScene, _super);

    function HighScoreScene() {
      var background, game, highScores, i, image, y, _i;
      HighScoreScene.__super__.constructor.call(this, this);
      this.backgroundColor = '#0af';
      game = Game.instance;
      image = game.assets[R.TITLE_BACKGROUND_IMAGE];
      background = new Sprite(image.width, image.height);
      background.image = image;
      background.x = 0;
      background.y = 0;
      this.addChild(background);
      highScores = [];
      y = 60;
      for (i = _i = 0; _i < 10; i = ++_i) {
        highScores[i] = new MutableText();
        highScores[i].text = (i + 1) + '. ' + Settings.highScores[i];
        highScores[i].x = (game.width - highScores[i].width) / 2;
        highScores[i].y = y;
        y += 30;
        this.addChild(highScores[i]);
      }
    }

    HighScoreScene.prototype.ontouchstart = function() {
      var game;
      game = Game.instance;
      return game.replaceScene(new TitleScene());
    };

    return HighScoreScene;

  })(Scene);

  TitleScene = (function(_super) {

    __extends(TitleScene, _super);

    function TitleScene() {
      var background, game, highscore, image, logo, start;
      TitleScene.__super__.constructor.call(this, this);
      this.backgroundColor = '#0af';
      game = Game.instance;
      image = game.assets[R.TITLE_BACKGROUND_IMAGE];
      background = new Sprite(image.width, image.height);
      background.image = image;
      background.x = 0;
      background.y = 0;
      this.addChild(background);
      image = game.assets[R.TITLE_LOGO_IMAGE];
      logo = new Sprite(image.width, image.height);
      logo.image = image;
      logo.x = (game.width - logo.width) / 2;
      logo.y = 13;
      this.addChild(logo);
      image = game.assets[R.START_BUTTON_IMAGE];
      start = new Sprite(image.width, image.height / 2);
      start.image = image;
      start.x = (game.width - start.width) / 2;
      start.y = 235;
      start.addEventListener('touchstart', function() {
        return game.replaceScene(new GameScene());
      });
      this.addChild(start);
      image = game.assets[R.HIGHSCORE_BUTTON_IMAGE];
      highscore = new Sprite(image.width, image.height / 2);
      highscore.image = image;
      highscore.x = (game.width - highscore.width) / 2;
      highscore.y = 340;
      highscore.addEventListener('touchstart', function() {
        return game.replaceScene(new HighScoreScene());
      });
      this.addChild(highscore);
      Settings.load();
    }

    return TitleScene;

  })(Scene);

  GameScene = (function(_super) {

    __extends(GameScene, _super);

    GameScene.SCREEN_WIDTH = 320;

    GameScene.SCREEN_HEIGHT = 360;

    function GameScene() {
      var game;
      GameScene.__super__.constructor.call(this, this);
      this.backgroundColor = '#0af';
      this.isTouch = false;
      this.world = new World(this);
      this.addChild(this.world);
      this.upButton = new Sprite(320, 120);
      this.upButton.image = Game.instance.assets[R.UPBUTTON_IMAGE];
      this.upButton.y = GameScene.SCREEN_HEIGHT;
      this.addChild(this.upButton);
      this.update = this.updateReady;
      game = Game.instance;
      this.readyText = new MutableText();
      this.readyText.text = "Ready...";
      this.readyText.x = (GameScene.SCREEN_WIDTH - this.readyText.width) / 2;
      this.readyText.y = (GameScene.SCREEN_HEIGHT - this.readyText.height) / 2;
      this.addChild(this.readyText);
      this.time = game.getElapsedTime();
    }

    GameScene.prototype.ontouchstart = function() {
      this.isTouch = true;
      return this.upButton.frame = 1;
    };

    GameScene.prototype.ontouchend = function() {
      this.isTouch = false;
      return this.upButton.frame = 0;
    };

    GameScene.prototype.onenterframe = function() {
      return this.update();
    };

    GameScene.prototype.updateReady = function() {
      var game;
      game = Game.instance;
      if (game.getElapsedTime() - this.time > 1.0) {
        if (this.readyText.text === 'Ready...') {
          this.readyText.text = 'Go!!';
          this.readyText.x = (GameScene.SCREEN_WIDTH - this.readyText.width) / 2;
          this.readyText.y = (GameScene.SCREEN_HEIGHT - this.readyText.height) / 2;
          return this.time = game.getElapsedTime();
        } else {
          this.removeChild(this.readyText);
          return this.update = this.updateRunning;
        }
      }
    };

    GameScene.prototype.updateRunning = function() {
      var game;
      game = Game.instance;
      this.world.update();
      if (this.world.isGameOver) {
        return this.gameOver();
      }
    };

    GameScene.prototype.updateGameOver = function() {
      var game;
      game = Game.instance;
      if (game.getElapsedTime() - this.time < 0.5) {
        return;
      }
      if (game.frame % 14 === 0) {
        this.end.visible = !this.end.visible;
      }
      if (this.isTouch) {
        return game.replaceScene(new TitleScene());
      }
    };

    GameScene.prototype.gameOver = function() {
      var game, image;
      game = Game.instance;
      image = game.assets[R.END_IMAGE];
      this.end = new Sprite(image.width, image.height);
      this.end.image = image;
      this.end.x = (GameScene.SCREEN_WIDTH - this.end.width) / 2;
      this.end.y = (GameScene.SCREEN_HEIGHT - this.end.height) / 2;
      this.addChild(this.end);
      this.time = game.getElapsedTime();
      this.update = this.updateGameOver;
      Settings.addScore(this.world.score);
      Settings.save();
      return Settings.load();
    };

    return GameScene;

  })(Scene);

  World = (function(_super) {

    __extends(World, _super);

    World.GRAVITY = 0.14;

    function World(scene) {
      World.__super__.constructor.apply(this, arguments);
      this.scene = scene;
      this.background = new Background();
      this.addChild(this.background);
      this.player = new Droid(12, 120);
      this.addChild(this.player);
      this.enemies = [];
      this.enemyPool = new SpritePool(function() {
        return new EnemyDroid();
      }, 5);
      this.items = [];
      this.coinPool = new SpritePool(function() {
        return new Coin();
      }, 5);
      this.diamondPool = new SpritePool(function() {
        return new Diamond();
      }, 3);
      this.score = 0;
      this.scoreLabel = new ScoreLabel(10, 10);
      this.scoreLabel.score = this.score;
      this.addChild(this.scoreLabel);
    }

    World.prototype.update = function() {
      this.background.update();
      this.updatePlayer();
      this.updateEnemies();
      this.updateItems();
      this.scoreLabel.score = this.score;
      if (this.player.isAlive()) {
        this.checkEnemyCollisions();
        this.checkItemCollisions();
      }
      return this.checkGameOver();
    };

    World.prototype.updatePlayer = function() {
      if (this.scene.isTouch) {
        if (this.player.isAlive()) {
          this.player.rize();
        }
      }
      this.player.update();
    };

    World.prototype.updateEnemies = function() {
      var enemy, game, i, _i, _len, _ref, _results;
      game = Game.instance;
      if (game.frame % 25 === 0) {
        enemy = this.enemyPool.newSprite();
        enemy.initialize(GameScene.SCREEN_WIDTH + EnemyDroid.WIDTH, Math.random() * (GameScene.SCREEN_HEIGHT - EnemyDroid.HEIGHT));
        this.enemies.push(enemy);
        this.addChild(enemy);
      }
      _ref = this.enemies;
      _results = [];
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        enemy = _ref[i];
        _results.push(enemy.update());
      }
      return _results;
    };

    World.prototype.checkEnemyCollisions = function() {
      var enemy, i, removeObjIndex, _i, _j, _len, _len1, _ref, _results;
      removeObjIndex = [];
      _ref = this.enemies;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        enemy = _ref[i];
        if (!enemy) {
          return;
        }
        if (enemy.x + enemy.width < 0) {
          removeObjIndex.push(i);
          continue;
        }
        if (enemy.within(this.player, 20)) {
          removeObjIndex.push(i);
          this.player.hitEnemy();
          this.addChild(new Explosion(this.player.x, this.player.y));
        }
      }
      _results = [];
      for (_j = 0, _len1 = removeObjIndex.length; _j < _len1; _j++) {
        i = removeObjIndex[_j];
        enemy = this.enemies[i];
        this.removeChild(enemy);
        this.enemyPool.free(enemy);
        _results.push(this.enemies.splice(i, 1));
      }
      return _results;
    };

    World.prototype.updateItems = function() {
      var game, i, item, r, x, y, _i, _len, _ref;
      game = Game.instance;
      if (game.frame % 40 === 0) {
        r = Math.floor(Math.random() * 100);
        if (r < 8) {
          item = this.diamondPool.newSprite();
        } else {
          item = this.coinPool.newSprite();
        }
        x = GameScene.SCREEN_WIDTH + 30;
        y = Math.random() * (GameScene.SCREEN_HEIGHT - Item.WIDTH);
        item.initialize(x, y);
        this.items.push(item);
        this.addChild(item);
      }
      _ref = this.items;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        item = _ref[i];
        item.update();
      }
    };

    World.prototype.checkItemCollisions = function() {
      var i, item, label, removeObjIndex, _i, _j, _len, _len1, _ref, _results;
      removeObjIndex = [];
      _ref = this.items;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        item = _ref[i];
        if (item.x + item.width < 0) {
          removeObjIndex.push(i);
          continue;
        }
        if (item.intersect(this.player)) {
          removeObjIndex.push(i);
          label = new ScoreUpLabel(item.point);
          label.moveTo(item.x, item.y);
          this.addChild(label);
          this.score += item.point;
        }
      }
      _results = [];
      for (_j = 0, _len1 = removeObjIndex.length; _j < _len1; _j++) {
        i = removeObjIndex[_j];
        item = this.items[i];
        this.removeChild(item);
        if (item instanceof Coin) {
          this.coinPool.free(item);
        } else {
          this.diamondPool.free(item);
        }
        _results.push(this.items.splice(i, 1));
      }
      return _results;
    };

    World.prototype.checkGameOver = function() {
      if (this.player.y + this.player.height < 0 || this.player.y > GameScene.SCREEN_HEIGHT) {
        return this.isGameOver = true;
      }
    };

    return World;

  })(Group);

  Background = (function(_super) {

    __extends(Background, _super);

    Background.WIDTH = 1320;

    Background.HEIGHT = 360;

    Background.SCROLL_VELOCITY = -4;

    function Background() {
      var game;
      Background.__super__.constructor.call(this, Background.WIDTH, Background.HEIGHT);
      game = Game.instance;
      this.image = game.assets[R.BACKGROUND_IMAGE];
      this.vx = Background.SCROLL_VELOCITY;
    }

    Background.prototype.update = function() {
      var game;
      this.x += this.vx;
      game = Game.instance;
      if (this.x + this.width - GameScene.SCREEN_WIDTH < 0) {
        return this.moveTo(0, 0);
      }
    };

    return Background;

  })(Sprite);

  Droid = (function(_super) {

    __extends(Droid, _super);

    Droid.WIDTH = 32;

    Droid.HEIGHT = 32;

    Droid.MAX_RIZE = -5.0;

    Droid.RIZE = -0.3;

    function Droid(x, y) {
      Droid.__super__.constructor.call(this, Droid.WIDTH, Droid.HEIGHT);
      this.image = Game.instance.assets[R.PLAYER_IMAGE];
      this.moveTo(x, y);
      this.vy = 0;
      this.frame = 4;
      this.life = 2;
      this.update = this.updateFlying;
      this.isRize = false;
      this.invincibleTime = 0;
    }

    Droid.prototype.rize = function() {
      this.isRize = true;
      this.vy += Droid.RIZE;
      if (this.vy < Droid.MAX_RIZE) {
        return this.vy = Droid.MAX_RIZE;
      }
    };

    Droid.prototype.updateFlying = function() {
      var frameWidth, game;
      game = Game.instance;
      this.vy += World.GRAVITY;
      this.y += this.vy;
      frameWidth = 2;
      if (this.isRize) {
        if (game.frame % 4 === 0) {
          this.frame = (1 - this.frame % frameWidth) + this.life * frameWidth;
        }
      } else {
        this.frame = this.life * frameWidth;
      }
      this.isRize = false;
      if (this.invincibleTime > 0) {
        if (game.frame % 2 === 0) {
          this.visible = !this.visible;
        }
        if (game.frame - this.invincibleTime > 30) {
          this.state = Droid.STATE_FLYING;
          this.visible = true;
          return this.invincibleTime = 0;
        }
      }
    };

    Droid.prototype.updateFall = function() {
      var frameWidth, game;
      game = Game.instance;
      this.vy += World.GRAVITY + 0.2;
      this.y += this.vy;
      frameWidth = 2;
      if (game.frame % 4 === 0) {
        return this.frame = (1 - this.frame % frameWidth) + this.life * frameWidth;
      }
    };

    Droid.prototype.hitEnemy = function() {
      if (this.invincibleTime > 0 || !this.isAlive()) {
        return;
      }
      --this.life;
      if (this.life > 0) {
        return this.invincibleTime = Game.instance.frame;
      } else {
        return this.update = this.updateFall;
      }
    };

    Droid.prototype.isAlive = function() {
      return this.life > 0;
    };

    return Droid;

  })(Sprite);

  EnemyDroid = (function(_super) {

    __extends(EnemyDroid, _super);

    EnemyDroid.WIDTH = 32;

    EnemyDroid.HEIGHT = 32;

    EnemyDroid.MOVE_VELOCITY = -5;

    EnemyDroid.HIT_LENGTH = 28;

    function EnemyDroid() {
      EnemyDroid.__super__.constructor.call(this, EnemyDroid.WIDTH, EnemyDroid.HEIGHT);
      this.image = Game.instance.assets[R.ENEMY_IMAGE];
      this.initialize(0, 0);
    }

    EnemyDroid.prototype.initialize = function(x, y) {
      this.time = 0;
      this.moveTo(x, y);
      this.vx = EnemyDroid.MOVE_VELOCITY;
      return this.vy = 0;
    };

    EnemyDroid.prototype.update = function() {
      this.vy = Math.sin(this.time * 5 * Math.PI / 180);
      this.x += this.vx;
      this.y += this.vy;
      if (this.time % 5 === 0) {
        ++this.frame;
        this.frame %= 2;
      }
      ++this.time;
    };

    return EnemyDroid;

  })(Sprite);

  Item = (function(_super) {

    __extends(Item, _super);

    Item.WIDTH = 16;

    Item.HEIGHT = 16;

    Item.MOVE_VELOCITY = -4;

    function Item() {
      var game;
      Item.__super__.constructor.call(this, Item.WIDTH, Item.HEIGHT);
      game = Game.instance;
      this.image = game.assets[R.ICON_IMAGE];
      this.point = 0;
    }

    Item.prototype.initialize = function(x, y) {
      this.moveTo(x, y);
      return this.vx = Item.MOVE_VELOCITY;
    };

    Item.prototype.update = function() {
      this.x += this.vx;
    };

    return Item;

  })(Sprite);

  Coin = (function(_super) {

    __extends(Coin, _super);

    Coin.FRAME = 14;

    Coin.POINT = 100;

    function Coin() {
      Coin.__super__.constructor.apply(this, arguments);
      this.frame = Coin.FRAME;
      this.point = Coin.POINT;
      return;
    }

    return Coin;

  })(Item);

  Diamond = (function(_super) {

    __extends(Diamond, _super);

    Diamond.FRAME = 64;

    Diamond.POINT = 1000;

    function Diamond() {
      Diamond.__super__.constructor.apply(this, arguments);
      this.frame = Diamond.FRAME;
      this.point = Diamond.POINT;
      return;
    }

    return Diamond;

  })(Item);

  ScoreUpLabel = (function(_super) {

    __extends(ScoreUpLabel, _super);

    function ScoreUpLabel(score) {
      MutableText.call(this);
      this.text = '+' + score;
      this.time = 0;
    }

    ScoreUpLabel.prototype.onenterframe = function() {
      var game;
      game = Game.instance;
      this.y -= 0.1;
      this.opacity = 1.0 - (this.time / game.fps);
      if (this.time > game.fps) {
        this.parentNode.removeChild(this);
      }
      return this.time += 1;
    };

    return ScoreUpLabel;

  })(MutableText);

  Explosion = (function(_super) {

    __extends(Explosion, _super);

    Explosion.WIDTH = 16;

    Explosion.HEIGHT = 16;

    function Explosion(x, y) {
      Explosion.__super__.constructor.call(this, Explosion.WIDTH, Explosion.HEIGHT);
      this.image = Game.instance.assets[R.EXPLOSION_IMAGE];
      this.moveTo(x, y);
      this.frame = 0;
      this.scale(2);
    }

    Explosion.prototype.onenterframe = function() {
      ++this.frame;
      if (this.frame > 10) {
        return this.parentNode.removeChild(this);
      }
    };

    return Explosion;

  })(Sprite);

}).call(this);
